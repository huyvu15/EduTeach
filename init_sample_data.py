"""
Sample Data Generator for EduTeach API
This script generates comprehensive sample data for all API endpoints
"""

import asyncio
import motor.motor_asyncio
from datetime import datetime, timedelta
from passlib.context import CryptContext
from bson import ObjectId
import random

# Configuration
MONGODB_URL = "mongodb://localhost:27017"
DATABASE_NAME = "eduteach"

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)

class SampleDataGenerator:
    def __init__(self):
        self.client = motor.motor_asyncio.AsyncIOMotorClient(MONGODB_URL)
        self.database = self.client[DATABASE_NAME]
        self.users = []
        self.courses = []
        self.assignments = []
        self.exams = []
        self.webinars = []
        self.students = []
        self.library_docs = []
        self.forum_topics = []

    async def clear_all_data(self):
        """Clear all existing data"""
        print("üóëÔ∏è  Clearing existing data...")
        collections = ['users', 'courses', 'assignments', 'exams', 'webinars', 
                      'students', 'library', 'forum']
        
        for collection in collections:
            await self.database[collection].delete_many({})
        
        print("‚úÖ All data cleared!")

    async def create_users(self):
        """Create sample users (admin, teachers, students)"""
        print("üë• Creating users...")
        
        users_data = [
            # Admin
            {
                "email": "admin@example.com",
                "password": get_password_hash("admin123"),
                "full_name": "Administrator",
                "role": "admin",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            },
            # Teachers
            {
                "email": "teacher@example.com",
                "password": get_password_hash("teacher123"),
                "full_name": "GS. Nguy·ªÖn VƒÉn A",
                "role": "teacher",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            },
            {
                "email": "teacher2@example.com",
                "password": get_password_hash("teacher123"),
                "full_name": "TS. Tr·∫ßn Th·ªã B",
                "role": "teacher",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            },
            {
                "email": "teacher3@example.com",
                "password": get_password_hash("teacher123"),
                "full_name": "ThS. L√™ VƒÉn C",
                "role": "teacher",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            },
            # Students
            {
                "email": "student1@example.com",
                "password": get_password_hash("student123"),
                "full_name": "Nguy·ªÖn Th·ªã D",
                "role": "student",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            },
            {
                "email": "student2@example.com",
                "password": get_password_hash("student123"),
                "full_name": "Tr·∫ßn VƒÉn E",
                "role": "student",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            },
            {
                "email": "student3@example.com",
                "password": get_password_hash("student123"),
                "full_name": "Ph·∫°m Th·ªã F",
                "role": "student",
                "is_active": True,
                "avatar_url": "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=80&h=80&fit=crop&crop=face",
                "created_at": datetime.utcnow()
            }
        ]
        
        result = await self.database.users.insert_many(users_data)
        
        # Store users for reference
        for i, user_id in enumerate(result.inserted_ids):
            user_data = users_data[i].copy()
            user_data['_id'] = user_id
            self.users.append(user_data)
        
        print(f"‚úÖ Created {len(users_data)} users!")

    async def create_courses(self):
        """Create sample courses"""
        print("üìö Creating courses...")
        
        # Get teachers
        teachers = [user for user in self.users if user['role'] == 'teacher']
        
        courses_data = [
            {
                "title": "JavaScript c∆° b·∫£n",
                "description": "Kh√≥a h·ªçc JavaScript t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, bao g·ªìm ES6+, DOM manipulation, v√† async programming",
                "category": "programming",
                "level": "beginner",
                "duration_hours": 40,
                "price": 500000,
                "instructor_id": str(teachers[0]['_id']),
                "instructor_name": teachers[0]['full_name'],
                "status": "active",
                "enrolled_students": 45,
                "progress": 75,
                "image_url": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=300&h=180&fit=crop",
                "created_at": datetime.utcnow()
            },
            {
                "title": "React Advanced",
                "description": "Kh√≥a h·ªçc React n√¢ng cao v·ªõi Redux, TypeScript, v√† c√°c patterns hi·ªán ƒë·∫°i",
                "category": "programming",
                "level": "advanced",
                "duration_hours": 60,
                "price": 800000,
                "instructor_id": str(teachers[0]['_id']),
                "instructor_name": teachers[0]['full_name'],
                "status": "active",
                "enrolled_students": 32,
                "progress": 60,
                "image_url": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=300&h=180&fit=crop",
                "created_at": datetime.utcnow()
            },
            {
                "title": "Python for Data Science",
                "description": "H·ªçc Python cho khoa h·ªçc d·ªØ li·ªáu v·ªõi pandas, numpy, matplotlib v√† machine learning",
                "category": "data-science",
                "level": "intermediate",
                "duration_hours": 50,
                "price": 700000,
                "instructor_id": str(teachers[1]['_id']),
                "instructor_name": teachers[1]['full_name'],
                "status": "active",
                "enrolled_students": 28,
                "progress": 40,
                "image_url": "https://images.unsplash.com/photo-1526379095098-d400fd0bf935?w=300&h=180&fit=crop",
                "created_at": datetime.utcnow()
            },
            {
                "title": "UI/UX Design Fundamentals",
                "description": "C√°c nguy√™n t·∫Øc c∆° b·∫£n v·ªÅ thi·∫øt k·∫ø UI/UX, t·ª´ wireframe ƒë·∫øn prototype",
                "category": "design",
                "level": "beginner",
                "duration_hours": 35,
                "price": 600000,
                "instructor_id": str(teachers[2]['_id']),
                "instructor_name": teachers[2]['full_name'],
                "status": "draft",
                "enrolled_students": 0,
                "progress": 0,
                "image_url": "https://images.unsplash.com/photo-1561070791-2526d30994b5?w=300&h=180&fit=crop",
                "created_at": datetime.utcnow()
            },
            {
                "title": "Node.js Backend Development",
                "description": "X√¢y d·ª±ng REST API v·ªõi Node.js, Express, v√† MongoDB",
                "category": "programming",
                "level": "intermediate",
                "duration_hours": 45,
                "price": 650000,
                "instructor_id": str(teachers[0]['_id']),
                "instructor_name": teachers[0]['full_name'],
                "status": "completed",
                "enrolled_students": 38,
                "progress": 100,
                "image_url": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=300&h=180&fit=crop",
                "created_at": datetime.utcnow() - timedelta(days=30)
            }
        ]
        
        result = await self.database.courses.insert_many(courses_data)
        
        # Store courses for reference
        for i, course_id in enumerate(result.inserted_ids):
            course_data = courses_data[i].copy()
            course_data['_id'] = course_id
            self.courses.append(course_data)
        
        print(f"‚úÖ Created {len(courses_data)} courses!")

    async def create_assignments(self):
        """Create sample assignments"""
        print("üìù Creating assignments...")
        
        teachers = [user for user in self.users if user['role'] == 'teacher']
        
        assignments_data = [
            {
                "title": "B√†i t·∫≠p HTML Forms",
                "description": "T·∫°o form ƒëƒÉng k√Ω v·ªõi validation s·ª≠ d·ª•ng HTML5 v√† JavaScript",
                "due_date": datetime.utcnow() + timedelta(days=7),
                "max_score": 100,
                "instructor_id": str(teachers[0]['_id']),
                "course_id": str(self.courses[0]['_id']) if self.courses else None,
                "status": "pending",
                "created_at": datetime.utcnow()
            },
            {
                "title": "B√†i t·∫≠p CSS Flexbox",
                "description": "T·∫°o layout responsive v·ªõi CSS Flexbox v√† Grid",
                "due_date": datetime.utcnow() + timedelta(days=3),
                "max_score": 100,
                "instructor_id": str(teachers[0]['_id']),
                "course_id": str(self.courses[0]['_id']) if self.courses else None,
                "status": "completed",
                "created_at": datetime.utcnow()
            },
            {
                "title": "React Component Design",
                "description": "X√¢y d·ª±ng c√°c React components c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng",
                "due_date": datetime.utcnow() + timedelta(days=10),
                "max_score": 150,
                "instructor_id": str(teachers[0]['_id']),
                "course_id": str(self.courses[1]['_id']) if len(self.courses) > 1 else None,
                "status": "pending",
                "created_at": datetime.utcnow()
            },
            {
                "title": "Data Analysis v·ªõi Pandas",
                "description": "Ph√¢n t√≠ch dataset COVID-19 s·ª≠ d·ª•ng th∆∞ vi·ªán Pandas",
                "due_date": datetime.utcnow() + timedelta(days=14),
                "max_score": 120,
                "instructor_id": str(teachers[1]['_id']) if len(teachers) > 1 else str(teachers[0]['_id']),
                "course_id": str(self.courses[2]['_id']) if len(self.courses) > 2 else None,
                "status": "pending",
                "created_at": datetime.utcnow()
            },
            {
                "title": "API Documentation",
                "description": "Vi·∫øt t√†i li·ªáu API cho d·ª± √°n Node.js",
                "due_date": datetime.utcnow() - timedelta(days=2),
                "max_score": 80,
                "instructor_id": str(teachers[0]['_id']),
                "course_id": str(self.courses[4]['_id']) if len(self.courses) > 4 else None,
                "status": "overdue",
                "created_at": datetime.utcnow() - timedelta(days=5)
            }
        ]
        
        result = await self.database.assignments.insert_many(assignments_data)
        
        # Store assignments for reference
        for i, assignment_id in enumerate(result.inserted_ids):
            assignment_data = assignments_data[i].copy()
            assignment_data['_id'] = assignment_id
            self.assignments.append(assignment_data)
        
        print(f"‚úÖ Created {len(assignments_data)} assignments!")

    async def create_exams(self):
        """Create sample exams"""
        print("üìã Creating exams...")
        
        teachers = [user for user in self.users if user['role'] == 'teacher']
        
        exams_data = [
            {
                "title": "Ki·ªÉm tra gi·ªØa k·ª≥ JavaScript",
                "description": "Ki·ªÉm tra ki·∫øn th·ª©c JavaScript c∆° b·∫£n v√† ES6",
                "exam_date": datetime.utcnow() + timedelta(days=5),
                "duration_minutes": 90,
                "total_questions": 30,
                "max_score": 100,
                "instructor_id": str(teachers[0]['_id']),
                "course_id": str(self.courses[0]['_id']) if self.courses else None,
                "status": "upcoming",
                "created_at": datetime.utcnow()
            },
            {
                "title": "Final Test React",
                "description": "B√†i ki·ªÉm tra cu·ªëi kh√≥a React Advanced",
                "exam_date": datetime.utcnow() + timedelta(days=20),
                "duration_minutes": 120,
                "total_questions": 40,
                "max_score": 150,
                "instructor_id": str(teachers[0]['_id']),
                "course_id": str(self.courses[1]['_id']) if len(self.courses) > 1 else None,
                "status": "upcoming",
                "created_at": datetime.utcnow()
            },
            {
                "title": "Python Quiz",
                "description": "B√†i ki·ªÉm tra nhanh v·ªÅ Python basics",
                "exam_date": datetime.utcnow() - timedelta(days=3),
                "duration_minutes": 45,
                "total_questions": 20,
                "max_score": 80,
                "instructor_id": str(teachers[1]['_id']) if len(teachers) > 1 else str(teachers[0]['_id']),
                "course_id": str(self.courses[2]['_id']) if len(self.courses) > 2 else None,
                "status": "completed",
                "created_at": datetime.utcnow() - timedelta(days=7)
            },
            {
                "title": "UX Design Principles",
                "description": "Ki·ªÉm tra c√°c nguy√™n t·∫Øc thi·∫øt k·∫ø UX",
                "exam_date": datetime.utcnow() + timedelta(hours=2),
                "duration_minutes": 60,
                "total_questions": 25,
                "max_score": 100,
                "instructor_id": str(teachers[2]['_id']) if len(teachers) > 2 else str(teachers[0]['_id']),
                "course_id": str(self.courses[3]['_id']) if len(self.courses) > 3 else None,
                "status": "ongoing",
                "created_at": datetime.utcnow()
            }
        ]
        
        result = await self.database.exams.insert_many(exams_data)
        
        # Store exams for reference
        for i, exam_id in enumerate(result.inserted_ids):
            exam_data = exams_data[i].copy()
            exam_data['_id'] = exam_id
            self.exams.append(exam_data)
        
        print(f"‚úÖ Created {len(exams_data)} exams!")

    async def create_webinars(self):
        """Create sample webinars"""
        print("üé• Creating webinars...")
        
        teachers = [user for user in self.users if user['role'] == 'teacher']
        
        webinars_data = [
            {
                "title": "JavaScript ES6+ Features",
                "description": "T√¨m hi·ªÉu c√°c t√≠nh nƒÉng m·ªõi trong JavaScript ES6 v√† c√°c phi√™n b·∫£n sau",
                "scheduled_date": datetime.utcnow() + timedelta(days=2, hours=14),
                "duration_minutes": 90,
                "max_participants": 100,
                "webinar_type": "live",
                "instructor_id": str(teachers[0]['_id']),
                "status": "upcoming",
                "registered_count": 45,
                "thumbnail_url": "https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=400&h=225&fit=crop",
                "created_at": datetime.utcnow()
            },
            {
                "title": "React Hooks Deep Dive",
                "description": "Kh√°m ph√° s√¢u v·ªÅ React Hooks v√† custom hooks",
                "scheduled_date": datetime.utcnow() + timedelta(days=7, hours=19),
                "duration_minutes": 120,
                "max_participants": 80,
                "webinar_type": "live",
                "instructor_id": str(teachers[0]['_id']),
                "status": "upcoming",
                "registered_count": 32,
                "thumbnail_url": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=400&h=225&fit=crop",
                "created_at": datetime.utcnow()
            },
            {
                "title": "Data Visualization v·ªõi Python",
                "description": "T·∫°o bi·ªÉu ƒë·ªì v√† visualization v·ªõi matplotlib v√† seaborn",
                "scheduled_date": datetime.utcnow() - timedelta(days=5),
                "duration_minutes": 105,
                "max_participants": 60,
                "webinar_type": "recorded",
                "instructor_id": str(teachers[1]['_id']) if len(teachers) > 1 else str(teachers[0]['_id']),
                "status": "completed",
                "registered_count": 58,
                "thumbnail_url": "https://images.unsplash.com/photo-1526379095098-d400fd0bf935?w=400&h=225&fit=crop",
                "created_at": datetime.utcnow() - timedelta(days=10)
            },
            {
                "title": "Design System Best Practices",
                "description": "X√¢y d·ª±ng design system hi·ªáu qu·∫£ cho s·∫£n ph·∫©m",
                "scheduled_date": datetime.utcnow() + timedelta(days=12, hours=16),
                "duration_minutes": 75,
                "max_participants": 50,
                "webinar_type": "live",
                "instructor_id": str(teachers[2]['_id']) if len(teachers) > 2 else str(teachers[0]['_id']),
                "status": "upcoming",
                "registered_count": 23,
                "thumbnail_url": "https://images.unsplash.com/photo-1561070791-2526d30994b5?w=400&h=225&fit=crop",
                "created_at": datetime.utcnow()
            }
        ]
        
        result = await self.database.webinars.insert_many(webinars_data)
        
        # Store webinars for reference
        for i, webinar_id in enumerate(result.inserted_ids):
            webinar_data = webinars_data[i].copy()
            webinar_data['_id'] = webinar_id
            self.webinars.append(webinar_data)
        
        print(f"‚úÖ Created {len(webinars_data)} webinars!")

    async def create_students(self):
        """Create sample students with realistic data"""
        print("üéì Creating students...")
        
        students_data = [
            {
                "full_name": "Nguy·ªÖn VƒÉn Minh",
                "email": "minh.nguyen@student.edu",
                "phone": "0901234567",
                "course_id": str(self.courses[0]['_id']) if self.courses else None,
                "is_active": True,
                "progress": 85,
                "completed_assignments": 8,
                "average_score": 8.7,
                "avatar_url": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=80&h=80&fit=crop&crop=face",
                "notes": "H·ªçc vi√™n t√≠ch c·ª±c, ho√†n th√†nh b√†i t·∫≠p ƒë√∫ng h·∫°n",
                "created_at": datetime.utcnow() - timedelta(days=30)
            },
            {
                "full_name": "Tr·∫ßn Th·ªã Lan",
                "email": "lan.tran@student.edu",
                "phone": "0912345678",
                "course_id": str(self.courses[0]['_id']) if self.courses else None,
                "is_active": True,
                "progress": 92,
                "completed_assignments": 10,
                "average_score": 9.2,
                "avatar_url": "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=80&h=80&fit=crop&crop=face",
                "notes": "H·ªçc vi√™n xu·∫•t s·∫Øc, c√≥ kh·∫£ nƒÉng l√£nh ƒë·∫°o nh√≥m",
                "created_at": datetime.utcnow() - timedelta(days=25)
            },
            {
                "full_name": "L√™ Ho√†ng Nam",
                "email": "nam.le@student.edu",
                "phone": "0923456789",
                "course_id": str(self.courses[1]['_id']) if len(self.courses) > 1 else None,
                "is_active": True,
                "progress": 67,
                "completed_assignments": 5,
                "average_score": 7.5,
                "avatar_url": "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=80&h=80&fit=crop&crop=face",
                "notes": "C·∫ßn h·ªó tr·ª£ th√™m v·ªÅ c√°c kh√°i ni·ªám n√¢ng cao",
                "created_at": datetime.utcnow() - timedelta(days=20)
            },
            {
                "full_name": "Ph·∫°m Th·ªã Hoa",
                "email": "hoa.pham@student.edu",
                "phone": "0934567890",
                "course_id": str(self.courses[2]['_id']) if len(self.courses) > 2 else None,
                "is_active": True,
                "progress": 78,
                "completed_assignments": 7,
                "average_score": 8.1,
                "avatar_url": "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=80&h=80&fit=crop&crop=face",
                "notes": "Th√≠ch th√∫ v·ªõi data science, c√≥ nhi·ªÅu c√¢u h·ªèi hay",
                "created_at": datetime.utcnow() - timedelta(days=18)
            },
            {
                "full_name": "V≈© Minh Tu·∫•n",
                "email": "tuan.vu@student.edu",
                "phone": "0945678901",
                "course_id": str(self.courses[1]['_id']) if len(self.courses) > 1 else None,
                "is_active": False,
                "progress": 45,
                "completed_assignments": 3,
                "average_score": 6.8,
                "avatar_url": "https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=80&h=80&fit=crop&crop=face",
                "notes": "T·∫°m ngh·ªâ h·ªçc do b·∫≠n c√¥ng vi·ªác",
                "created_at": datetime.utcnow() - timedelta(days=15)
            },
            {
                "full_name": "ƒê·ªó Th·ªã Mai",
                "email": "mai.do@student.edu",
                "phone": "0956789012",
                "course_id": str(self.courses[3]['_id']) if len(self.courses) > 3 else None,
                "is_active": True,
                "progress": 30,
                "completed_assignments": 2,
                "average_score": 7.0,
                "avatar_url": "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=80&h=80&fit=crop&crop=face",
                "notes": "M·ªõi b·∫Øt ƒë·∫ßu, c√≥ background design",
                "created_at": datetime.utcnow() - timedelta(days=10)
            }
        ]
        
        result = await self.database.students.insert_many(students_data)
        
        # Store students for reference
        for i, student_id in enumerate(result.inserted_ids):
            student_data = students_data[i].copy()
            student_data['_id'] = student_id
            self.students.append(student_data)
        
        print(f"‚úÖ Created {len(students_data)} students!")

    async def create_library_documents(self):
        """Create sample library documents"""
        print("üìñ Creating library documents...")
        
        teachers = [user for user in self.users if user['role'] == 'teacher']
        
        library_data = [
            {
                "title": "JavaScript ES6 Cheat Sheet",
                "description": "T·ªïng h·ª£p c√°c t√≠nh nƒÉng ES6 quan tr·ªçng v·ªõi v√≠ d·ª•",
                "category": "reference",
                "file_type": "pdf",
                "is_public": True,
                "course_id": str(self.courses[0]['_id']) if self.courses else None,
                "author_id": str(teachers[0]['_id']),
                "author_name": teachers[0]['full_name'],
                "file_url": "/uploads/documents/js-es6-cheatsheet.pdf",
                "file_size": 1024000,
                "views": 245,
                "downloads": 89,
                "created_at": datetime.utcnow() - timedelta(days=5)
            },
            {
                "title": "React Best Practices Guide",
                "description": "H∆∞·ªõng d·∫´n c√°c best practices khi ph√°t tri·ªÉn ·ª©ng d·ª•ng React",
                "category": "tutorial",
                "file_type": "pdf",
                "is_public": True,
                "course_id": str(self.courses[1]['_id']) if len(self.courses) > 1 else None,
                "author_id": str(teachers[0]['_id']),
                "author_name": teachers[0]['full_name'],
                "file_url": "/uploads/documents/react-best-practices.pdf",
                "file_size": 2048000,
                "views": 178,
                "downloads": 67,
                "created_at": datetime.utcnow() - timedelta(days=8)
            },
            {
                "title": "Python Data Types Reference",
                "description": "Tham kh·∫£o c√°c ki·ªÉu d·ªØ li·ªáu trong Python v·ªõi examples",
                "category": "reference",
                "file_type": "docx",
                "is_public": True,
                "course_id": str(self.courses[2]['_id']) if len(self.courses) > 2 else None,
                "author_id": str(teachers[1]['_id']) if len(teachers) > 1 else str(teachers[0]['_id']),
                "author_name": teachers[1]['full_name'] if len(teachers) > 1 else teachers[0]['full_name'],
                "file_url": "/uploads/documents/python-data-types.docx",
                "file_size": 512000,
                "views": 156,
                "downloads": 78,
                "created_at": datetime.utcnow() - timedelta(days=12)
            },
            {
                "title": "UI Design Templates",
                "description": "Collection of UI design templates for web applications",
                "category": "template",
                "file_type": "sketch",
                "is_public": True,
                "course_id": str(self.courses[3]['_id']) if len(self.courses) > 3 else None,
                "author_id": str(teachers[2]['_id']) if len(teachers) > 2 else str(teachers[0]['_id']),
                "author_name": teachers[2]['full_name'] if len(teachers) > 2 else teachers[0]['full_name'],
                "file_url": "/uploads/documents/ui-templates.sketch",
                "file_size": 15360000,
                "views": 203,
                "downloads": 45,
                "created_at": datetime.utcnow() - timedelta(days=15)
            },
            {
                "title": "Node.js Project Structure",
                "description": "H∆∞·ªõng d·∫´n c·∫•u tr√∫c project Node.js chu·∫©n",
                "category": "tutorial",
                "file_type": "md",
                "is_public": True,
                "course_id": str(self.courses[4]['_id']) if len(self.courses) > 4 else None,
                "author_id": str(teachers[0]['_id']),
                "author_name": teachers[0]['full_name'],
                "file_url": "/uploads/documents/nodejs-structure.md",
                "file_size": 256000,
                "views": 134,
                "downloads": 56,
                "created_at": datetime.utcnow() - timedelta(days=20)
            },
            {
                "title": "Database Design Principles",
                "description": "C√°c nguy√™n t·∫Øc thi·∫øt k·∫ø database hi·ªáu qu·∫£",
                "category": "reference",
                "file_type": "pptx",
                "is_public": False,
                "course_id": None,
                "author_id": str(teachers[1]['_id']) if len(teachers) > 1 else str(teachers[0]['_id']),
                "author_name": teachers[1]['full_name'] if len(teachers) > 1 else teachers[0]['full_name'],
                "file_url": "/uploads/documents/database-design.pptx",
                "file_size": 3072000,
                "views": 89,
                "downloads": 34,
                "created_at": datetime.utcnow() - timedelta(days=25)
            }
        ]
        
        result = await self.database.library.insert_many(library_data)
        
        # Store library docs for reference
        for i, doc_id in enumerate(result.inserted_ids):
            doc_data = library_data[i].copy()
            doc_data['_id'] = doc_id
            self.library_docs.append(doc_data)
        
        print(f"‚úÖ Created {len(library_data)} library documents!")

    async def create_forum_topics(self):
        """Create sample forum topics"""
        print("üí¨ Creating forum topics...")
        
        teachers = [user for user in self.users if user['role'] == 'teacher']
        students = [user for user in self.users if user['role'] == 'student']
        all_users = teachers + students
        
        forum_data = [
            {
                "title": "L√†m th·∫ø n√†o ƒë·ªÉ optimize performance React app?",
                "content": "M√¨nh ƒëang ph√°t tri·ªÉn m·ªôt ·ª©ng d·ª•ng React kh√° l·ªõn v√† th·∫•y performance kh√¥ng ƒë∆∞·ª£c t·ªët. C√°c b·∫°n c√≥ th·ªÉ chia s·∫ª kinh nghi·ªám optimize kh√¥ng?",
                "category": "programming",
                "tags": ["react", "performance", "optimization"],
                "is_pinned": False,
                "author_id": str(random.choice(students)['_id']),
                "author_name": random.choice(students)['full_name'],
                "author_avatar": random.choice(students)['avatar_url'],
                "views": 45,
                "replies": 8,
                "created_at": datetime.utcnow() - timedelta(days=2)
            },
            {
                "title": "H∆∞·ªõng d·∫´n setup environment cho Python Data Science",
                "content": "ƒê·ªÉ c√°c b·∫°n m·ªõi b·∫Øt ƒë·∫ßu h·ªçc Python DS d·ªÖ d√†ng h∆°n, m√¨nh chia s·∫ª c√°ch setup environment v·ªõi Anaconda v√† c√°c packages c·∫ßn thi·∫øt.",
                "category": "tutorial",
                "tags": ["python", "data-science", "setup"],
                "is_pinned": True,
                "author_id": str(teachers[1]['_id']) if len(teachers) > 1 else str(teachers[0]['_id']),
                "author_name": teachers[1]['full_name'] if len(teachers) > 1 else teachers[0]['full_name'],
                "author_avatar": teachers[1]['avatar_url'] if len(teachers) > 1 else teachers[0]['avatar_url'],
                "views": 123,
                "replies": 15,
                "created_at": datetime.utcnow() - timedelta(days=5)
            },
            {
                "title": "Th·∫£o lu·∫≠n v·ªÅ career path cho Frontend Developer",
                "content": "M√¨nh ƒëang h·ªçc frontend v√† mu·ªën x√¢y d·ª±ng career path r√µ r√†ng. C√°c anh/ch·ªã senior c√≥ th·ªÉ t∆∞ v·∫•n kh√¥ng ·∫°?",
                "category": "career",
                "tags": ["career", "frontend", "advice"],
                "is_pinned": False,
                "author_id": str(random.choice(students)['_id']),
                "author_name": random.choice(students)['full_name'],
                "author_avatar": random.choice(students)['avatar_url'],
                "views": 78,
                "replies": 12,
                "created_at": datetime.utcnow() - timedelta(days=1)
            },
            {
                "title": "CSS Grid vs Flexbox - Khi n√†o d√πng c√°i n√†o?",
                "content": "M√¨nh th∆∞·ªùng b·ªã confused khi ch·ªçn gi·ªØa CSS Grid v√† Flexbox. C√≥ ai c√≥ th·ªÉ gi·∫£i th√≠ch r√µ h∆°n kh√¥ng?",
                "category": "programming",
                "tags": ["css", "grid", "flexbox", "layout"],
                "is_pinned": False,
                "author_id": str(random.choice(students)['_id']),
                "author_name": random.choice(students)['full_name'],
                "author_avatar": random.choice(students)['avatar_url'],
                "views": 67,
                "replies": 9,
                "created_at": datetime.utcnow() - timedelta(days=3)
            },
            {
                "title": "Chia s·∫ª resources h·ªçc UX Design mi·ªÖn ph√≠",
                "content": "T·ªïng h·ª£p c√°c t√†i li·ªáu, kh√≥a h·ªçc mi·ªÖn ph√≠ ch·∫•t l∆∞·ª£ng v·ªÅ UX Design cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.",
                "category": "resources",
                "tags": ["ux-design", "resources", "free"],
                "is_pinned": True,
                "author_id": str(teachers[2]['_id']) if len(teachers) > 2 else str(teachers[0]['_id']),
                "author_name": teachers[2]['full_name'] if len(teachers) > 2 else teachers[0]['full_name'],
                "author_avatar": teachers[2]['avatar_url'] if len(teachers) > 2 else teachers[0]['avatar_url'],
                "views": 156,
                "replies": 23,
                "created_at": datetime.utcnow() - timedelta(days=7)
            },
            {
                "title": "MongoDB vs PostgreSQL cho d·ª± √°n startup",
                "content": "D·ª± √°n startup c·ªßa team m√¨nh ƒëang ph√¢n v√¢n ch·ªçn database. Ai c√≥ kinh nghi·ªám v·ªõi c·∫£ hai c√≥ th·ªÉ t∆∞ v·∫•n kh√¥ng?",
                "category": "programming",
                "tags": ["mongodb", "postgresql", "database", "startup"],
                "is_pinned": False,
                "author_id": str(random.choice(all_users)['_id']),
                "author_name": random.choice(all_users)['full_name'],
                "author_avatar": random.choice(all_users)['avatar_url'],
                "views": 89,
                "replies": 14,
                "created_at": datetime.utcnow() - timedelta(days=4)
            }
        ]
        
        result = await self.database.forum.insert_many(forum_data)
        
        # Store forum topics for reference
        for i, topic_id in enumerate(result.inserted_ids):
            topic_data = forum_data[i].copy()
            topic_data['_id'] = topic_id
            self.forum_topics.append(topic_data)
        
        print(f"‚úÖ Created {len(forum_data)} forum topics!")

    async def generate_all_data(self, clear_existing=True):
        """Generate all sample data"""
        print("üöÄ Starting sample data generation...")
        print("=" * 50)
        
        if clear_existing:
            await self.clear_all_data()
        
        # Create data in order (some depend on others)
        await self.create_users()
        await self.create_courses()
        await self.create_assignments()
        await self.create_exams()
        await self.create_webinars()
        await self.create_students()
        await self.create_library_documents()
        await self.create_forum_topics()
        
        print("=" * 50)
        print("üéâ Sample data generation completed!")
        print(f"‚úÖ Users: {len(self.users)}")
        print(f"‚úÖ Courses: {len(self.courses)}")
        print(f"‚úÖ Assignments: {len(self.assignments)}")
        print(f"‚úÖ Exams: {len(self.exams)}")
        print(f"‚úÖ Webinars: {len(self.webinars)}")
        print(f"‚úÖ Students: {len(self.students)}")
        print(f"‚úÖ Library Documents: {len(self.library_docs)}")
        print(f"‚úÖ Forum Topics: {len(self.forum_topics)}")
        print("=" * 50)
        print("üîë Login credentials:")
        print("   Admin: admin@example.com / admin123")
        print("   Teacher: teacher@example.com / teacher123")
        print("   Student: student1@example.com / student123")
        print("=" * 50)

    async def close_connection(self):
        """Close database connection"""
        self.client.close()

async def main():
    """Main function to run the data generator"""
    generator = SampleDataGenerator()
    
    try:
        await generator.generate_all_data(clear_existing=True)
    except Exception as e:
        print(f"‚ùå Error generating data: {e}")
    finally:
        await generator.close_connection()

if __name__ == "__main__":
    # Run the data generator
    asyncio.run(main())
